// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Page");

function handleText($$event, self) {
  var target = $$event.target;
  var content = target.value;
  return Curry._1(self[/* send */4], /* UpdateText */[content]);
}

var preamble = "\ntype rowT = {width: int, height: int, color: string};\ntype svgRectT = {x: int, y: int, w: int, h: int, c: string};\nlet processRow = (row) => {\n";

function doCompile(state) {
  console.log("Compiling...");
  var reason_code = state[/* text */0];
  var wrapped_code = preamble + (reason_code + "}");
  var ocaml$1 = printML(parseRE(wrapped_code));
  var js = ocaml.compile(ocaml$1);
  var match = js.js_error_msg;
  if (match == null) {
    var match$1 = eval(js.js_code);
    if (match$1 == null) {
      return /* record */[
              /* text */state[/* text */0],
              /* error : Some */["Error when evaling code"],
              /* output */state[/* output */2],
              /* data */state[/* data */3]
            ];
    } else {
      return /* record */[
              /* text */state[/* text */0],
              /* error */state[/* error */1],
              /* output : Some */[$$Array.map(match$1, state[/* data */3])],
              /* data */state[/* data */3]
            ];
    }
  } else {
    return /* record */[
            /* text */state[/* text */0],
            /* error : Some */[match],
            /* output */state[/* output */2],
            /* data */state[/* data */3]
          ];
  }
}

function createRow(id, row) {
  return React.createElement("tr", {
              key: String(id)
            }, React.createElement("td", {
                  style: {
                    border: "1px solid black"
                  }
                }, String(row[/* width */0])), React.createElement("td", {
                  style: {
                    border: "1px solid black"
                  }
                }, String(row[/* height */1])), React.createElement("td", {
                  style: {
                    border: "1px solid black"
                  }
                }, row[/* color */2]));
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* error */1];
      var match$1 = self[/* state */2][/* output */2];
      return React.createElement("div", undefined, React.createElement("table", {
                      style: {
                        border: "1px solid black"
                      }
                    }, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "width"), React.createElement("th", undefined, "height"), React.createElement("th", undefined, "color"))), React.createElement("tbody", undefined, $$Array.mapi(createRow, self[/* state */2][/* data */3]))), React.createElement("br", undefined), React.createElement("br", undefined), "(row) => {", React.createElement("br", undefined), React.createElement("textarea", {
                      style: {
                        height: "100px",
                        marginTop: "5px",
                        marginLeft: "30px",
                        width: "300px"
                      },
                      name: "textarea",
                      value: self[/* state */2][/* text */0],
                      onChange: (function ($$event) {
                          return handleText($$event, self);
                        })
                    }), React.createElement("br", undefined), "}", React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(self[/* send */4], /* Compile */0);
                        })
                    }, "Compile"), React.createElement("button", {
                      onClick: (function () {
                          return Curry._1(self[/* send */4], /* Reformat */1);
                        })
                    }, "Reformat"), match ? React.createElement("div", undefined, React.createElement("br", undefined), match[0]) : null, React.createElement("svg", {
                      height: "100",
                      width: "100"
                    }, match$1 ? $$Array.map((function (svgRect) {
                              return React.createElement("rect", {
                                          style: {
                                            fill: svgRect[/* c */4]
                                          },
                                          height: String(svgRect[/* h */3]),
                                          width: String(svgRect[/* w */2])
                                        });
                            }), match$1[0]) : null));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* text */"{x: 1, y: 1, w: row.width, h: row.height, c: row.color}",
              /* error : None */0,
              /* output : None */0,
              /* data : array */[
                /* record */[
                  /* width */20,
                  /* height */40,
                  /* color */"blue"
                ],
                /* record */[
                  /* width */40,
                  /* height */30,
                  /* color */"red"
                ]
              ]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action !== 0) {
          return /* Update */Block.__(0, [/* record */[
                      /* text */printRE(parseRE(state[/* text */0])),
                      /* error */state[/* error */1],
                      /* output */state[/* output */2],
                      /* data */state[/* data */3]
                    ]]);
        } else {
          return /* Update */Block.__(0, [doCompile(state)]);
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* text */action[0],
                    /* error */state[/* error */1],
                    /* output */state[/* output */2],
                    /* data */state[/* data */3]
                  ]]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.handleText = handleText;
exports.preamble = preamble;
exports.doCompile = doCompile;
exports.createRow = createRow;
exports.make = make;
/* component Not a pure module */
